<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>STM32CubeMX教程5 TIM 定时器概述及基本定时器</title>
    <link href="/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B5-TIM-%E5%AE%9A%E6%97%B6%E5%99%A8%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <url>/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B5-TIM-%E5%AE%9A%E6%97%B6%E5%99%A8%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、准备材料"><a href="#1、准备材料" class="headerlink" title="1、准备材料"></a>1、准备材料</h1><p>开发板（<a href="https://www.st.com/en/evaluation-tools/stm32f4discovery.html">STM32F407G-DISC1</a>）</p><p>STM32CubeMX软件（<a href="https://www.st.com/en/development-tools/stm32cubemx.html">Version 6.10.0</a>）</p><p>keil µVision5 IDE（<a href="https://www.keil.com/download/product/">MDK-Arm</a>）</p><p><a href="https://www.st.com/zh/development-tools/stsw-link009.html">ST-LINK&#x2F;V2驱动</a></p><p>逻辑分析仪<a href="https://github.com/wuxx/nanoDLA">nanoDLA</a></p><h1 id="2、实验目标"><a href="#2、实验目标" class="headerlink" title="2、实验目标"></a>2、实验目标</h1><p>使用STM32CubeMX软件配置STM32F407开发板<font color="#fe2c24"><strong>使用基本定时器TIM6实现每500ms控制绿灯状态变化一次，基本定时器TIM7实现每1s控制红灯状态变化一次</strong></font></p><h1 id="3、定时器概述"><a href="#3、定时器概述" class="headerlink" title="3、定时器概述"></a>3、定时器概述</h1><p>STM32F407拥有2个基础定时器、10个通用定时器和2个高级定时器，14个定时器全部挂载在APB1和APB2时钟总线上，APB2时钟总线时钟频率最高可达84MHz，APB1时钟总线时钟频率最高可达42MHz，除TIM2和TIM5为32位外，其余定时器全部为16位，其结构框图如下图所示 <em>（注释1）</em></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.1.png" width = "700"></div><p>​不同的定时器具有不同的特性，有些定时器的计数器长度为16位，有些则为32位；有些定时器可以递增、递减或递增&#x2F;递减计数，但有些定时器只能递增计数；有些定时器可以产生DMA请求，有些则不可以；另外定时器捕获&#x2F;比较通道数量也不一样；具体特性区别请看下表 <em>（注释2）</em></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.2.png" width = "700"></div><h1 id="​4、实验流程"><a href="#​4、实验流程" class="headerlink" title="​4、实验流程"></a>​4、实验流程</h1><h2 id="4-0、前提知识"><a href="#4-0、前提知识" class="headerlink" title="4.0、前提知识"></a>4.0、前提知识</h2><p>基本定时器由TIM6和TIM7组成，计数器为16位，内部结构较为简单，只有定时器的基本功能，可以做定时或驱动DAC，<font color="#fe2c24"><strong>本实验暂不讨论DAC，只用定时功能</strong></font>，如下图所示为基本定时器框架 <em>（注释3）</em></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.3.png" width = "700"></div><p><font color="#fe2c24"><strong>​基本定时器的时钟来源为APB1 Timer clocks</strong></font>，当通过控制器启动基本定时器TIM6&#x2F;7时，时钟信号经过PSC预分频器将时钟分频，然后以分频后的时钟频率增加计数器的值，当计数器达到自动重载寄存器设置的值之后，产生溢出</p><h2 id="4-1、CubeMX相关配置"><a href="#4-1、CubeMX相关配置" class="headerlink" title="4.1、CubeMX相关配置"></a>4.1、CubeMX相关配置</h2><h3 id="4-1-0、工程基本配置"><a href="#4-1-0、工程基本配置" class="headerlink" title="4.1.0、工程基本配置"></a>4.1.0、工程基本配置</h3><p>打开STM32CubeMX软件，单击ACCESS TO MCU SELECTOR选择开发板MCU（选择你使用开发板的主控MCU型号），选中MCU型号后单击页面右上角Start Project开始工程，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.4.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.5.png" width = "700"></div><p>​开始工程之后在配置主页面System Core&#x2F;RCC中配置HSE&#x2F;LSE晶振，在System Core&#x2F;SYS中配置Debug模式，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.6.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.7.png" width = "700"></div><p>​详细工程建立内容读者可以阅读“<a href="https://www.cnblogs.com/lc-guo/p/17937268">STM32CubeMX教程1 工程建立</a>”</p><h3 id="4-1-1、时钟树配置"><a href="#4-1-1、时钟树配置" class="headerlink" title="4.1.1、时钟树配置"></a>4.1.1、时钟树配置</h3><p>基本定时器涉及到定时时间的问题，而TIM6&#x2F;7的时钟来源自APB1 Timer clocks，因此需要先知道APB1 Timer clocks的频率，才可以计算基本定时器的溢出时间</p><p>如下图所示，时钟树上所有总线频率均设置为了STM32F4能达到的最高频率，<font color="#fe2c24"><strong>此时APB1 Timer clocks&#x3D;84MHz</strong></font></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.8.png" width = "700"></div><h3 id="4-1-2、外设参数配置"><a href="#4-1-2、外设参数配置" class="headerlink" title="4.1.2、外设参数配置"></a>4.1.2、外设参数配置</h3><p>在Pinout ＆ Configuration页面左侧功能分类栏目中点开Timers栏目，单击栏目下的TIM6和TIM7</p><p>在页面中间TIM6&#x2F;7 Mode and Configuration 中勾选Activated激活基本定时器，<font color="#fe2c24"><strong>One Pulse Mode为单次定时模式，勾选该模式则定时器只触发一次，默认定时器为连续触发</strong></font>，触发完一次后自动重载ARR中设置的值重新计数</p><p>在页面中间Configuration栏中可设置基本定时器参数，包括<font color="#be191c" style="background: #fef2f0"> Prescaler </font>（预分频系数）、<font color="#be191c" style="background: #fef2f0"> Counter Mode </font>（计数模式）和<font color="#be191c" style="background: #fef2f0"> Counter Period </font>（ARR寄存器的值）通过这些参数的设置可以决定基本定时器的溢出时间</p><p><font color="#fe2c24"><strong>APB1 Timer clocks&#x3D;84MHz，PSC&#x3D;8399，ARR&#x3D;4999，此时可计算溢出时间为(PSC+1)(ARR+1)&#x2F;APB1 Timer clocks&#x3D;0.5秒&#x3D;500毫秒</strong></font>，则每500ms定时器产生一次溢出，ARR设置为9999则定时器1s溢出一次</p><p><font color="#be191c" style="background: #fef2f0"> auto-reload preload </font>：可以选择使能或不使能，如果不使能该参数，则在使用__HAL_TIM_SET_AUTORELOAD()函数动态修改基本定时器ARR参数值时，修改的值会立马生效；而如果使能该参数，则修改的值会在当前计数溢出之后下次得到修改</p><p><font color="#be191c" style="background: #fef2f0"> Trigger Output (TRGO) Parameters </font>：一般是用来设置用作其他外设的触发源的，比如将Trigger Event Selection选择为Update Event，然后在其他外设比如ADC中配置外部触发源时选择该定时器的触发事件（如果可以的话），这样在定时器产生Update Event时就可以启动外设，实现用定时器来控制外设启动的功能</p><p>上述配置如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.9.png" width = "700"></div><h3 id="4-1-3、外设中断配置"><a href="#4-1-3、外设中断配置" class="headerlink" title="4.1.3、外设中断配置"></a>4.1.3、外设中断配置</h3><p><font color="#fe2c24"><strong>基本定时器的触发有三种模式 ① 轮询方式、② 中断方式和③ DMA方式，这里只介绍前两种方式</strong></font></p><p>① 对于轮询方式，当前设置已经足够，只需要在生成的程序中使用HAL_TIM_Base_Start(&amp;htim6)启动基本定时器，然后不断轮询计数值或UEV事件标志来判断是否发生了计数溢出</p><p>② 中断方式是基本定时器最常用的方式，在Pinout ＆ Configuration页面左侧功能分类栏目中点开NVIC栏目，然后选择合适的中断优先级并勾选基本定时器6和7的中断使能</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.10.png" width = "700"></div><h2 id="4-2、生成代码"><a href="#4-2、生成代码" class="headerlink" title="4.2、生成代码"></a>4.2、生成代码</h2><h3 id="4-2-0、配置Project-Manager页面"><a href="#4-2-0、配置Project-Manager页面" class="headerlink" title="4.2.0、配置Project Manager页面"></a>4.2.0、配置Project Manager页面</h3><p>单击进入Project Manager页面，在左边Project分栏中修改工程名称、工程目录和工具链，然后在Code Generator中勾选“Gnerate peripheral initialization as a pair of ‘c&#x2F;h’ files per peripheral”，最后单击页面右上角GENERATE CODE生成工程，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.11.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.12.png" width = "700"></div><p>详细Project Manager配置内容读者可以阅读“<a href="https://www.cnblogs.com/lc-guo/p/17937268">STM32CubeMX教程1 工程建立</a>”实验3.4.3小节</p><h3 id="4-2-1、外设初始化调用流程"><a href="#4-2-1、外设初始化调用流程" class="headerlink" title="4.2.1、外设初始化调用流程"></a>4.2.1、外设初始化调用流程</h3><p>在工程代码主函数main()中调用MX_TIM6_Init()函数对基本定时器TIM6参数进行了配置</p><p>在该MX_TIM6_Init()函数中调用了HAL_TIM_Base_Init()对定时器进行了初始化</p><p>然后在HAL_TIM_Base_Init()函数中调用了HAL_TIM_Base_MspInit()函数对TIM6时钟和中断设置&#x2F;使能</p><p>TIM7初始化流程类似，具体定时器TIM6初始化流程如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.13.png" width = "700"></div><h3 id="4-2-2、外设中断调用流程"><a href="#4-2-2、外设中断调用流程" class="headerlink" title="4.2.2、外设中断调用流程"></a>4.2.2、外设中断调用流程</h3><p>激活了基本定时器并启动TIM6&#x2F;7全局中断之后，会在stm32f4xx_it.c中新增TIM6&#x2F;7的中断服务函数TIM6_DAC_IRQHandler()和TIM7_IRQHandler()</p><p>该函数均调用HAL库的定时器中断统一处理函数HAL_TIM_IRQHandler()，该函数通过一系列的判断最终得出基本定时器目的为周期回调 <em>（注释4）</em>，<font color="#fe2c24"><strong>因此最终调用周期回调函数HAL_TIM_PeriodElapsedCallback()，该函数为虚函数</strong></font></p><p>TIM7中断调用流程类似，具体定时器TIM6中断调用流程如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.14.png" width = "700"></div><h3 id="4-2-3、添加其他必要代码"><a href="#4-2-3、添加其他必要代码" class="headerlink" title="4.2.3、添加其他必要代码"></a>4.2.3、添加其他必要代码</h3><p>重新在tim.c中实现周期回调函数HAL_TIM_PeriodElapsedCallback()，当定时器TIM6溢出则翻转GREEN_LED引脚状态，当定时器TIM7溢出则翻转RED_LED引脚状态，具体代码如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.15.png" width = "700"></div><p>​源代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*基本定时器周期回调函数*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_TIM_PeriodElapsedCallback</span><span class="hljs-params">(TIM_HandleTypeDef *htim)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(htim == &amp;htim6)<br>    &#123;<br>        HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin) ;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span>(htim == &amp;htim7)<br>    &#123;<br>        HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在主函数中以中断方式启动基本定时器TIM6&#x2F;7，具体代码如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.16.png" ></div><h1 id="5、常用函数"><a href="#5、常用函数" class="headerlink" title="5、常用函数"></a>5、常用函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*以轮询工作方式启动定时器*/</span><br>HAL_StatusTypeDef <span class="hljs-title function_">HAL_TIM_Base_Start</span><span class="hljs-params">(TIM_HandleTypeDef *htim)</span><br> <br><span class="hljs-comment">/*停止轮询工作方式的定时器*/</span><br>HAL_StatusTypeDef <span class="hljs-title function_">HAL_TIM_Base_Stop</span><span class="hljs-params">(TIM_HandleTypeDef *htim)</span><br> <br><span class="hljs-comment">/*以中断工作方式启动定时器*/</span><br>HAL_StatusTypeDef <span class="hljs-title function_">HAL_TIM_Base_Start_IT</span><span class="hljs-params">(TIM_HandleTypeDef *htim)</span><br> <br><span class="hljs-comment">/*停止中断工作方式的定时器*/</span><br>HAL_StatusTypeDef <span class="hljs-title function_">HAL_TIM_Base_Stop_IT</span><span class="hljs-params">(TIM_HandleTypeDef *htim)</span><br> <br><span class="hljs-comment">/*定时器周期回调子函数*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_TIM_PeriodElapsedCallback</span><span class="hljs-params">(TIM_HandleTypeDef *htim)</span><br></code></pre></td></tr></table></figure><h1 id="6、烧录验证"><a href="#6、烧录验证" class="headerlink" title="6、烧录验证"></a>6、烧录验证</h1><p>烧录程序，开发板上电后观察现象为绿灯每隔500ms状态改变一次，红灯每隔1s状态改变一次</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.17.gif"></div><p>使用逻辑分析仪监测PD12&#x2F;14引脚状态，可以看出TIM6每500ms翻转一次PD12引脚状态，TIM7每1000ms翻转一次PD14引脚状态</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/5.18.png" width = "700"></div><h1 id="7、注释详解"><a href="#7、注释详解" class="headerlink" title="7、注释详解"></a>7、注释详解</h1><p><em>注释1</em>：图片来源STM32F407VGT6 Datasheet DS8626</p><p><em>注释2</em>：图片来源 <a href="https://www.cnblogs.com/schips/p/12427900.html">STM32 CubeMX 学习：003-定时器（其原表有错误）</a></p><p><em>注释3</em>：图片来源STM32F4xx中文参考手册</p><p><em>注释4</em>：具体过程请参看 HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) 函数详解</p>]]></content>
    
    
    
    <tags>
      
      <tag>STM32CubeMX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32CubeMX教程4 EXTI 按键外部中断</title>
    <link href="/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B4-EXTI-%E6%8C%89%E9%94%AE%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/"/>
    <url>/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B4-EXTI-%E6%8C%89%E9%94%AE%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="1、准备材料"><a href="#1、准备材料" class="headerlink" title="1、准备材料"></a>1、准备材料</h1><p>开发板（<a href="https://www.st.com/en/evaluation-tools/stm32f4discovery.html">STM32F407G-DISC1</a>）</p><p>STM32CubeMX软件（<a href="https://www.st.com/en/development-tools/stm32cubemx.html">Version 6.10.0</a>）</p><p>keil µVision5 IDE（<a href="https://www.keil.com/download/product/">MDK-Arm</a>）</p><p><a href="https://www.st.com/zh/development-tools/stsw-link009.html">ST-LINK&#x2F;V2驱动</a></p><h1 id="2、实验目标"><a href="#2、实验目标" class="headerlink" title="2、实验目标"></a>2、实验目标</h1><p>使用STM32CubeMX软件配置STM32F407开发板<font color="#fe2c24"><strong>通过用户按键产生外部中断</strong></font>，然后在中断中翻转绿色LED灯的状态</p><h1 id="3、中断系统概述"><a href="#3、中断系统概述" class="headerlink" title="3、中断系统概述"></a>3、中断系统概述</h1><h2 id="3-1、中断向量表"><a href="#3-1、中断向量表" class="headerlink" title="3.1、中断向量表"></a>3.1、中断向量表</h2><p>STM32F4系列有10个系统中断和82个可屏蔽的外部中断 <em>（注释1）</em>，除系统Reset中断外每个中断均有对应的中断服务函数，如下图所示为中断向量表</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.1.png" width = "700"></div><h2 id="3-2、中断优先级"><a href="#3-2、中断优先级" class="headerlink" title="3.2、中断优先级"></a>3.2、中断优先级</h2><p>嵌套向量中断控制器（NVIC）采用4位二进制数表示中断优先级，<font color="#fe2c24"><strong>这4位二进制数表示的中断优先级又分为了抢占优先级和次优先级</strong></font>，其中根据抢占优先级所使用的二进制位数分成了5个组，分为NVIC_PRIORITYGROUP_0 ~ NVIC_PRIORITYGROUP_4，分别表示抢占优先级使用0~4位二进制数表示，具体规则如下几点所述：</p><ol><li>高抢占优先级的中断可以打断低抢占优先级的中断</li><li>抢占优先级和次优先级均相同的两个中断谁先发生谁就先执行</li><li>抢占优先级相同但次优先级不同的两个中断，后触发的中断需要等待先触发的中断执行完毕才可以执行</li></ol><h1 id="4、实验流程"><a href="#4、实验流程" class="headerlink" title="4、实验流程"></a>4、实验流程</h1><h2 id="4-0、前提知识"><a href="#4-0、前提知识" class="headerlink" title="4.0、前提知识"></a>4.0、前提知识</h2><p>STM32F407一共有23个外部中断，其中包含16个外部中断（EXTI0~EXTI15）和7个对应不同的事件的中断，如下表所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.2.png" width = "700"></div><p>每一组GPIO的0号引脚均可以作为EXTI0的输入，同理，每一组GPIO的15号引脚均可以作为EXTI15的输入，具体映射如下图所示 <em>（注释2）</em></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.3.png" width = "700"></div><h2 id="4-1、CubeMX相关配置"><a href="#4-1、CubeMX相关配置" class="headerlink" title="4.1、CubeMX相关配置"></a>4.1、CubeMX相关配置</h2><h3 id="4-1-0、工程基本配置"><a href="#4-1-0、工程基本配置" class="headerlink" title="4.1.0、工程基本配置"></a>4.1.0、工程基本配置</h3><p>打开STM32CubeMX软件，单击ACCESS TO MCU SELECTOR选择开发板MCU（选择你使用开发板的主控MCU型号），选中MCU型号后单击页面右上角Start Project开始工程，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.4.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.5.png" width = "700"></div><p>开始工程之后在配置主页面System Core&#x2F;RCC中配置HSE&#x2F;LSE晶振，在System Core&#x2F;SYS中配置Debug模式，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.6.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.7.png" width = "700"></div><p>详细工程建立内容读者可以阅读“<a href="https://www.cnblogs.com/lc-guo/p/17937268">STM32CubeMX教程1 工程建立</a>”</p><h3 id="4-1-1、时钟树配置"><a href="#4-1-1、时钟树配置" class="headerlink" title="4.1.1、时钟树配置"></a>4.1.1、时钟树配置</h3><p>系统时钟使用8MHz外部高速时钟HSE，HCLK、PCLK1和PCLK2均设置为STM32F407能达到的最高时钟频率，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.8.png" width = "700"></div><h3 id="4-1-2、外设参数配置"><a href="#4-1-2、外设参数配置" class="headerlink" title="4.1.2、外设参数配置"></a>4.1.2、外设参数配置</h3><p>在Pinout ＆ Configuration页面右边单片机引脚预览Pinout view中，寻找需要设置的具体GPIO，这里我们仍然<font color="#fe2c24"><strong>选择用户按键的PA0引脚，但是右键单击将其配置为GPIO_EXTI0</strong></font></p><p>在页面的中间GPIO Mode and Configuration栏中选中PA0引脚，然后在下方对其引脚进行配置，外部中断主要配置<font color="#be191c" style="background: #fef2f0">   GPIO mode </font>和<font color="#be191c" style="background: #fef2f0"> GPIO Pull-up&#x2F;Pull-down </font></p><p><font color="#be191c" style="background: #fef2f0"> GPIO mode </font>：有外部中断上升沿、下降沿、上&#x2F;下降沿触发、外部事件上升沿、下降沿和上&#x2F;下降沿触发共计6种模式</p><p><font color="#be191c" style="background: #fef2f0"> GPIO Pull-up&#x2F;Pull-down </font>：选择无上&#x2F;下拉，根据“<a href="https://www.cnblogs.com/lc-guo/p/17938621">STM32CubeMX教程3 GPIO输入 - 按键响应</a>”实验“3.1.2、外设参数配置”小节可知开发板上的按键已经使用电阻进行外部下拉</p><p>我们使用的是外部中断，并且在按键按下松开时既会产生上升沿也会产生下降沿，因此笔者这里<font color="#fe2c24"><strong>选择下降沿触发，无上&#x2F;下拉的外部中断模式</strong></font>，具体配置如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.9.png" width = "700"></div><h3 id="4-1-3、外设中断配置"><a href="#4-1-3、外设中断配置" class="headerlink" title="4.1.3、外设中断配置"></a>4.1.3、外设中断配置</h3><p>将引脚配置为中断模式后，还需要<font color="#fe2c24"><strong>在NVIC中启动其具体的中断</strong></font>，单击页面左侧的NVIC配置，选择合适的中断优先级组，然后启动对应的中断，这里即用户按键引脚PA0的中断EXTline0 interrupt，具体配置如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.10.png" width = "700"></div><h2 id="4-2、生成代码"><a href="#4-2、生成代码" class="headerlink" title="4.2、生成代码"></a>4.2、生成代码</h2><h3 id="4-2-0、配置Project-Manager页面"><a href="#4-2-0、配置Project-Manager页面" class="headerlink" title="4.2.0、配置Project Manager页面"></a>4.2.0、配置Project Manager页面</h3><p>单击进入Project Manager页面，在左边Project分栏中修改工程名称、工程目录和工具链，然后在Code Generator中勾选“Gnerate peripheral initialization as a pair of ‘c&#x2F;h’ files per peripheral”，最后单击页面右上角GENERATE CODE生成工程，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.11.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.12.png" width = "700"></div><p>详细Project Manager配置内容读者可以阅读“<a href="https://www.cnblogs.com/lc-guo/p/17937268">STM32CubeMX教程1 工程建立</a>”实验3.4.3小节</p><h3 id="4-2-1、外设初始化调用流程"><a href="#4-2-1、外设初始化调用流程" class="headerlink" title="4.2.1、外设初始化调用流程"></a>4.2.1、外设初始化调用流程</h3><p>当仅仅配置了引脚为外部中断模式，而不启动对应的外部中断时，在生成的代码引脚初始化函数MX_GPIO_Init中只会增加如下图框中所示的代码，此时由于未使能中断，因此中断不能正常响应，如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.13.png" width = "700"></div><h3 id="4-2-2、外设中断调用流程"><a href="#4-2-2、外设中断调用流程" class="headerlink" title="4.2.2、外设中断调用流程"></a>4.2.2、外设中断调用流程</h3><p>当配置了引脚为外部中断模式，且使能了引脚对应的中断，首先会在HAL_Init(void)函数中设置中断优先级组（系统默认开启了一些中断，因此即使我们不使能外部中断该函数也会被其他开启的中断调用从而设置中断优先级组），如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.14.png" width = "700"></div><p>另外除了上述的引脚模式设置代码外，还会在引脚初始化函数MX_GPIO_Init中新增加中断优先级设置及对应中断使能的函数，如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.15.png" width = "700"></div><p>然后在stm32f4xx_it.c文件中会出现对应的中断服务子函数void EXTI0_IRQHandler(void) <em>（注释3）</em>，中断服务子函数中调用了HAL_GPIO_EXTI_IRQHandler(GPIO_Pin)函数，跳转过去在函数内部执行了</p><ol><li>检测该中断线是否有挂起的外部中断</li><li>如果有则清除挂起的外部中断线</li><li>然后调用外部中断回调函数HAL_GPIO_EXTI_Callback(GPIO_Pin)（此函数为虚函数，可由用户自定义）</li></ol><p>具体流程如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.16.png" width = "700"></div><h3 id="4-2-3、添加其他必要代码"><a href="#4-2-3、添加其他必要代码" class="headerlink" title="4.2.3、添加其他必要代码"></a>4.2.3、添加其他必要代码</h3><p>此时<font color="#fe2c24"><strong>用户只需要重新实现HAL_GPIO_EXTI_Callback(GPIO_Pin)函数即可</strong></font>，在该函数体内可以实现中断触发后想要实现的功能代码，笔者将该函数重新实现在了gpio.c中</p><p>值得注意的是在外部中断回调函数中使用到了HAL库延时函数来对按键消抖，此处可能会存在严重的问题 <em>（注释4）</em></p><p>具体代码如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.17.png"></div><p>​源代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_GPIO_EXTI_Callback</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> GPIO_Pin)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(GPIO_Pin == USER_KEY_Pin)<br>    &#123;<br>        HAL_Delay(<span class="hljs-number">10</span>);<br>        HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5、常用函数"><a href="#5、常用函数" class="headerlink" title="5、常用函数"></a>5、常用函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*所有外部中断触发回调服务子函数，通过GPIO_Pin判断是哪个中断线，然后在函数体内做相应动作*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_GPIO_EXTI_Callback</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> GPIO_Pin)</span><br></code></pre></td></tr></table></figure><h1 id="6、烧录验证"><a href="#6、烧录验证" class="headerlink" title="6、烧录验证"></a>6、烧录验证</h1><p>烧录程序，然后可以观察到当开发板上电后，四个颜色LED全部点亮，然后每按下一次用户按键，绿色LED灯状态均会发生翻转</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/4.18.gif" ></div><h1 id="7、注释解析"><a href="#7、注释解析" class="headerlink" title="7、注释解析"></a>7、注释解析</h1><p><em>注释1</em>：具体的中断向量表可以在keil工程目录启动文件startup_stm32f407xx.s中查看，这里的中断数量笔者是根据启动文件中的数量计算的，其中Reserved的中断向量未计数</p><p><em>注释2</em>：图片来自STM32F4xx中文参考手册.pdf</p><p><em>注释3</em>：以后对于每一个外设中断，启用后都会在stm32f4xx_it.c文件中找到对应的中断服务函数</p><p><em>注释4</em>：<font color="#fe2c24">HAL库延时函数HAL_Delay使用的是系统滴答定时器作为时间基准，而系统滴答定时器同为中断，在外部中断中触发系统滴答定时器中断会涉及中断优先级的问题</font>，此时需保证滴答定时器的抢占优先级高于我们所使用的外部中断，否则会出现卡死的现象发生</p>]]></content>
    
    
    
    <tags>
      
      <tag>STM32CubeMX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32CubeMX教程3 GPIO输入 - 按键响应</title>
    <link href="/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B3-GPIO%E8%BE%93%E5%85%A5-%E6%8C%89%E9%94%AE%E5%93%8D%E5%BA%94/"/>
    <url>/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B3-GPIO%E8%BE%93%E5%85%A5-%E6%8C%89%E9%94%AE%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h1 id="1、准备材料"><a href="#1、准备材料" class="headerlink" title="1、准备材料"></a>1、准备材料</h1><p>开发板（<a href="https://www.st.com/en/evaluation-tools/stm32f4discovery.html">STM32F407G-DISC1</a>）</p><p>STM32CubeMX软件（<a href="https://www.st.com/en/development-tools/stm32cubemx.html">Version 6.10.0</a>）</p><p>keil µVision5 IDE（<a href="https://www.keil.com/download/product/">MDK-Arm</a>）</p><p><a href="https://www.st.com/zh/development-tools/stsw-link009.html">ST-LINK&#x2F;V2驱动</a></p><h1 id="2、实验目标"><a href="#2、实验目标" class="headerlink" title="2、实验目标"></a>2、实验目标</h1><p>使用STM32CubeMX软件配置STM32F407开发板的按键作为输入，利用按键输入使LED灯产生响应</p><h1 id="3、实验流程"><a href="#3、实验流程" class="headerlink" title="3、实验流程"></a>3、实验流程</h1><h2 id="3-0、前提知识"><a href="#3-0、前提知识" class="headerlink" title="3.0、前提知识"></a>3.0、前提知识</h2><p>对于所有的GPIO来说都是既可以作为输出引脚也可以作为输入引脚使用，本开发板上有一个用户按键，可以作为本次实验的输入，如下图所示为用户按键的电路原理图，<font color="#fe2c24"><strong>当松开按键时，PA0为低电平；当按下按键时，PA0为高电平</strong></font> <em>（注释1）</em></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.1.png" width = "700"></div><h2 id="3-1、CubeMX相关配置"><a href="#3-1、CubeMX相关配置" class="headerlink" title="3.1、CubeMX相关配置"></a>3.1、CubeMX相关配置</h2><h3 id="3-1-0、工程基本配置"><a href="#3-1-0、工程基本配置" class="headerlink" title="3.1.0、工程基本配置"></a>3.1.0、工程基本配置</h3><p>打开STM32CubeMX软件，单击ACCESS TO MCU SELECTOR选择开发板MCU（选择你使用开发板的主控MCU型号），选中MCU型号后单击页面右上角Start Project开始工程，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.2.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.3.png" width = "700"></div><p>开始工程之后在配置主页面System Core&#x2F;RCC中配置HSE&#x2F;LSE晶振，在System Core&#x2F;SYS中配置Debug模式，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.4.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.5.png" width = "700"></div><p>详细工程建立内容读者可以阅读“<a href="https://www.cnblogs.com/lc-guo/p/17937268">STM32CubeMX教程1 工程建立</a>”</p><h3 id="3-1-1、时钟树配置"><a href="#3-1-1、时钟树配置" class="headerlink" title="3.1.1、时钟树配置"></a>3.1.1、时钟树配置</h3><p>系统时钟使用8MHz外部高速时钟HSE，HCLK、PCLK1和PCLK2均设置为STM32F407能达到的最高时钟频率，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.6.png" width = "700"></div><h3 id="3-1-2、外设参数配置"><a href="#3-1-2、外设参数配置" class="headerlink" title="3.1.2、外设参数配置"></a>3.1.2、外设参数配置</h3><p>在Pinout ＆ Configuration页面右边单片机引脚预览Pinout view中，寻找需要设置的具体GPIO，这里我们选择用户按键的PA0引脚，<font color="#fe2c24"><strong>左键单击引脚将引脚功能设置为GPIO_Input</strong></font></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.7.png" width = "700"></div><p>当<font color="#be191c" style="background: #fef2f0"> GPIO mode </font>选择Input mode时，<font color="#be191c" style="background: #fef2f0"> GPIO Pull-up&#x2F;Pull-down </font>可以选择无上&#x2F;下拉、上拉和下拉</p><p>无上&#x2F;下拉表示引脚输入状态完全由外部输入决定，称为浮空输入</p><p>上拉表示当无外部输入时，此时引脚的状态被上拉至高电平</p><p>同理，下拉表示当无外部输入时，此时引脚的状态被下拉至低电平</p><p>根据用户按键的硬件原理图可以知道，该用户按键已经通过电阻进行外部下拉，因此无需我们软件配置上下拉（实际是否需要配置上&#x2F;下拉根据读者开发板按键硬件原理图决定）</p><p>这里我们<font color="#fe2c24"><strong>选择输入模式，无上&#x2F;下拉</strong></font>，具体配置如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.8.png" ></div><h2 id="3-2、生成代码"><a href="#3-2、生成代码" class="headerlink" title="3.2、生成代码"></a>3.2、生成代码</h2><h3 id="3-2-0、配置Project-Manager页面"><a href="#3-2-0、配置Project-Manager页面" class="headerlink" title="3.2.0、配置Project Manager页面"></a>3.2.0、配置Project Manager页面</h3><p>单击进入Project Manager页面，在左边Project分栏中修改工程名称、工程目录和工具链，然后在Code Generator中勾选“Gnerate peripheral initialization as a pair of ‘c&#x2F;h’ files per peripheral”，最后单击页面右上角GENERATE CODE生成工程，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.9.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.10.png" width = "700"></div><p>详细Project Manager配置内容读者可以阅读“<a href="https://www.cnblogs.com/lc-guo/p/17937268">STM32CubeMX教程1 工程建立</a>”实验3.4.3小节</p><h3 id="3-2-1、外设初始化调用流程"><a href="#3-2-1、外设初始化调用流程" class="headerlink" title="3.2.1、外设初始化调用流程"></a>3.2.1、外设初始化调用流程</h3><p>从生成的代码工程目录中打开keil工程，在MX_GPIO_Init(void)函数中会发现我们新添加的USER_KEY按键初始化代码，其模式为输入模式</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.11.png" width = "700"></div><h3 id="3-2-2、添加其他必要代码"><a href="#3-2-2、添加其他必要代码" class="headerlink" title="3.2.2、添加其他必要代码"></a>3.2.2、添加其他必要代码</h3><p>在主函数的主循环中添加按键扫描及响应函数，如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.12.png" width = "700"></div><p>源代码如下 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(HAL_GPIO_ReadPin(USER_KEY_GPIO_Port,USER_KEY_Pin) == GPIO_PIN_SET)<br>&#123;<br>    HAL_Delay(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span>(HAL_GPIO_ReadPin(USER_KEY_GPIO_Port,USER_KEY_Pin) == GPIO_PIN_SET)<br>    &#123;<br>        HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin) ;<br>        <span class="hljs-keyword">while</span>(HAL_GPIO_ReadPin(USER_KEY_GPIO_Port,USER_KEY_Pin) == GPIO_PIN_SET);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、常用函数"><a href="#4、常用函数" class="headerlink" title="4、常用函数"></a>4、常用函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  读取某个GPIO当前的状态</span><br><span class="hljs-comment">  * @param  GPIOx：引脚组别（GPIOA - GPIOI）</span><br><span class="hljs-comment">  * @param  GPIO_Pin：引脚（GPIO_PIN_0 - GPIO_PIN_15）</span><br><span class="hljs-comment">  * @retval GPIO_PinState：低电平（GPIO_PIN_RESET）、高电平（GPIO_PIN_SET）</span><br><span class="hljs-comment">  */</span><br>GPIO_PinState <span class="hljs-title function_">HAL_GPIO_ReadPin</span><span class="hljs-params">(GPIO_TypeDef* GPIOx, <span class="hljs-type">uint16_t</span> GPIO_Pin)</span><br> <br><span class="hljs-comment">/*读取PA0当前状态并存储到Now_PinState变量中*/</span><br>Now_PinState = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);<br></code></pre></td></tr></table></figure><h1 id="5、烧录验证"><a href="#5、烧录验证" class="headerlink" title="5、烧录验证"></a>5、烧录验证</h1><p>烧录程序，当开发板上电后，四个颜色的LED全部点亮，然后每按下一次用户按键，绿色LED灯状态会发生翻转</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/3.13.gif"></div><h1 id="6、注释解析"><a href="#6、注释解析" class="headerlink" title="6、注释解析"></a>6、注释解析</h1><p><em>注释1</em>：首先忽视掉R38和C38，因为笔者开发板上未焊接C38。当松开按键时，按键处相当于断路，此时PA0引脚经过R35、R39下拉至地，状态为低电平；当按下按键时，按键处相当于短路，此时PA0引脚经过R35被上拉至VDD，状态为高电平；</p>]]></content>
    
    
    
    <tags>
      
      <tag>STM32CubeMX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32CubeMX教程2 GPIO输出 - 点亮LED灯</title>
    <link href="/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B2-GPIO%E8%BE%93%E5%87%BA-%E7%82%B9%E4%BA%AELED%E7%81%AF/"/>
    <url>/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B2-GPIO%E8%BE%93%E5%87%BA-%E7%82%B9%E4%BA%AELED%E7%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="1、准备材料"><a href="#1、准备材料" class="headerlink" title="1、准备材料"></a>1、准备材料</h1><p>开发板（<a href="https://www.st.com/en/evaluation-tools/stm32f4discovery.html">STM32F407G-DISC1</a>）</p><p>STM32CubeMX软件（<a href="https://www.st.com/en/development-tools/stm32cubemx.html">Version 6.10.0</a>）</p><p>keil µVision5 IDE（<a href="https://www.keil.com/download/product/">MDK-Arm</a>）</p><p><a href="https://www.st.com/zh/development-tools/stsw-link009.html">ST-LINK&#x2F;V2驱动</a></p><h1 id="2、实验目标"><a href="#2、实验目标" class="headerlink" title="2、实验目标"></a>2、实验目标</h1><p>使用STM32CubeMX软件配置STM32F407开发板点亮LED灯</p><h1 id="3、实验流程"><a href="#3、实验流程" class="headerlink" title="3、实验流程"></a>3、实验流程</h1><h2 id="3-0、前提知识"><a href="#3-0、前提知识" class="headerlink" title="3.0、前提知识"></a>3.0、前提知识</h2><p>笔者使用的STM32F407G-DISC1开发板主控制器为STM32F407VGT6，该MCU封装为LQFP 100，一共100个引脚，除去16个POWER引脚、1个NRST引脚和一个BOOT0引脚外，还剩余82个引脚，剩下的这些引脚均可以作为GPIO输入输出引脚使用，这些引脚分为6组，分别为GPIOA、GPIOB、GPIOC、GPIOD、GPIOE和GPIOH，除GPIOH只有2个引脚外，其余5组均为16个引脚，如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.1.png" ></div><p>在编程语言学习的过程中，一般学习者初始程序大多选择输出“Hello World!”，而在嵌入式单片机的学习中，一般学习者初始程序大多为“点亮LED灯”，笔者使用的开发板上拥有四个不同颜色的LED灯，其硬件原理图如下图所示，从电路连接上可以看出，<font color="#fe2c24"><strong>从上到下绿橙红蓝四个LED灯分别由单片机的PD12、PD13、PD14和PD15四个引脚控制，当这四个引脚输出高电平时，相应的LED则会被点亮</strong></font></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.2.png"></div><h2 id="3-1、CubeMX相关配置"><a href="#3-1、CubeMX相关配置" class="headerlink" title="3.1、CubeMX相关配置"></a>3.1、CubeMX相关配置</h2><h3 id="3-1-0、工程基本配置"><a href="#3-1-0、工程基本配置" class="headerlink" title="3.1.0、工程基本配置"></a>3.1.0、工程基本配置</h3><p>打开STM32CubeMX软件，单击ACCESS TO MCU SELECTOR选择开发板MCU（选择你使用开发板的主控MCU型号），选中MCU型号后单击页面右上角Start Project开始工程，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.3.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.4.png" width = "700"></div><p>开始工程之后在配置主页面System Core&#x2F;RCC中配置HSE&#x2F;LSE晶振，在System Core&#x2F;SYS中配置Debug模式，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.5.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.6.png" width = "700"></div><p>详细工程建立内容读者可以阅读“<a href="https://www.cnblogs.com/lc-guo/p/17937268">STM32CubeMX教程1 工程建立</a>”</p><h3 id="3-1-1、时钟树配置"><a href="#3-1-1、时钟树配置" class="headerlink" title="3.1.1、时钟树配置"></a>3.1.1、时钟树配置</h3><p>系统时钟使用8MHz外部高速时钟HSE，HCLK、PCLK1和PCLK2均设置为STM32F407能达到的最高时钟频率，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.7.png" width = "700"></div><h3 id="3-1-2、外设参数配置"><a href="#3-1-2、外设参数配置" class="headerlink" title="3.1.2、外设参数配置"></a>3.1.2、外设参数配置</h3><p>在Pinout ＆ Configuration页面右边单片机引脚预览Pinout view中，寻找需要设置的具体GPIO，这里我们选择PD12、PD13、PD14和PD15四个引脚，左键单击引脚可以对引脚功能进行设置，<font color="#fe2c24"><strong>统一选择为GPIO_Output</strong></font></p><p>在页面左边单片机功能分类栏目中选择GPIO，然后在页面中间栏目GPIO Mode and Configuration中可以看到所有使用到的具体GPIO及其相关配置，单击某个GPIO可以对其配置进行修改</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.8.png" width = "700"></div><p>当引脚选择GPIO Output时，GPIO mode有推挽输出和开漏输出两种，GPIO Pull-up&#x2F;Pull-down可以选择无上&#x2F;下拉、上拉和下拉其中的几种，<font color="#fe2c24"><strong>需要注意的是开漏输出无法真正输出高电平，即高电平时没有驱动能力，需要借助外部上拉电阻完成对外驱动</strong></font> <em>（注释1）</em></p><p>当GPIO mode设置为推挽输出时，此时上&#x2F;下拉只有在没有输出时才有作用，也就是说，推挽输出状态下，如果控制输出高电平那IO状态就为高电平，若控制输出低电平那IO状态就为低电平，此时与上&#x2F;下拉无关，而当没有控制输出时，此时IO的状态由上&#x2F;下拉决定 <em>（注释2）</em></p><p>当GPIO mode设置为开漏输出时，如果控制输出低电平那IO状态就为低电平；若控制输出高电平，此时输出指令就不会起到作用，IO状态由上&#x2F;下拉决定</p><p>因此<font color="#fe2c24"><strong>PD12、PD13、PD14和PD15四个引脚模式选择推挽输出，无上下拉</strong></font>，具体配置如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.9.png"></div><h2 id="3-2、生成代码"><a href="#3-2、生成代码" class="headerlink" title="3.2、生成代码"></a>3.2、生成代码</h2><h3 id="3-2-0、配置Project-Manager页面"><a href="#3-2-0、配置Project-Manager页面" class="headerlink" title="3.2.0、配置Project Manager页面"></a>3.2.0、配置Project Manager页面</h3><p>单击进入Project Manager页面，在左边Project分栏中修改工程名称、工程目录和工具链，然后在Code Generator中勾选“Gnerate peripheral initialization as a pair of ‘c&#x2F;h’ files per peripheral”，最后单击页面右上角GENERATE CODE生成工程，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.10.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.11.png" width = "700"></div><p>详细Project Manager配置内容读者可以阅读“<a href="https://www.cnblogs.com/lc-guo/p/17937268">STM32CubeMX教程1 工程建立</a>”实验3.4.3小节</p><h3 id="3-2-1、外设初始化调用流程"><a href="#3-2-1、外设初始化调用流程" class="headerlink" title="3.2.1、外设初始化调用流程"></a>3.2.1、外设初始化调用流程</h3><p>打开工程，在main.c主函数中可以看到初始化部分多了MX_GPIO_Init()函数，此函数即初始化4个LED引脚为输出的函数</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.12.png" width = "700"></div><p>右键单击函数，单击Go To Definition Of ‘MX_GPlO_Init’ 定位<em>（注释3）</em>到函数定义所在的文件gpio.c<em>（注释4）</em>中，可以看到初始化函数中所做的设置正是我们在STM32CubeMX中所做的设置</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.13.png" width = "700"></div><p>此时如果不增加任何代码，编译整个工程应该是可以正常编译通过，0错误和0警告</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.14.png"></div><h3 id="3-2-2、添加其他必要代码"><a href="#3-2-2、添加其他必要代码" class="headerlink" title="3.2.2、添加其他必要代码"></a>3.2.2、添加其他必要代码</h3><p>然后我们就可以添加我们自己的功能代码，在主函数初始化LED的引脚之后，将引脚输出为高电平即可点亮LED，还可以在主循环中每隔一定时间翻转LED引脚的输出电平，形成LED闪烁的状态，添加代码如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.15.png" width = "700"></div><p>源代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*点亮四个LED灯*/</span><br>HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,GPIO_PIN_SET);<br>HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port,ORANGE_LED_Pin,GPIO_PIN_SET);<br>HAL_GPIO_WritePin(RED_LED_GPIO_Port,RED_LED_Pin,GPIO_PIN_SET);<br>HAL_GPIO_WritePin(BLUE_LED_GPIO_Port,BLUE_LED_Pin,GPIO_PIN_SET);<br><br><span class="hljs-comment">/*每隔100ms翻转绿色LED灯状态*/</span><br>HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin) ;<br>HAL_Delay(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h1 id="4、常用函数"><a href="#4、常用函数" class="headerlink" title="4、常用函数"></a>4、常用函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  设置某个GPIO固定输出高电平或低电平</span><br><span class="hljs-comment">  * @param  GPIOx：引脚组别（GPIOA - GPIOI）</span><br><span class="hljs-comment">  * @param  GPIO_Pin：引脚（GPIO_PIN_0 - GPIO_PIN_15）</span><br><span class="hljs-comment">  * @param  PinState：低电平（GPIO_PIN_RESET）、高电平（GPIO_PIN_SET）</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">    */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_GPIO_WritePin</span><span class="hljs-params">(GPIO_TypeDef* GPIOx, <span class="hljs-type">uint16_t</span> GPIO_Pin, GPIO_PinState PinState)</span>;<br><br><span class="hljs-comment">/*设置PA0引脚输出高电平*/</span><br>HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  设置某个GPIO的输出电平翻转</span><br><span class="hljs-comment">  * @param  GPIOx：引脚组别（GPIOA - GPIOI）</span><br><span class="hljs-comment">  * @param  GPIO_Pin：引脚（GPIO_PIN_0 - GPIO_PIN_15）</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">    */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_GPIO_TogglePin</span><span class="hljs-params">(GPIO_TypeDef* GPIOx, <span class="hljs-type">uint16_t</span> GPIO_Pin)</span>;<br><br><span class="hljs-comment">/*翻转PA0引脚输出电平*/</span><br>HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_0);<br></code></pre></td></tr></table></figure><h1 id="5、烧录验证"><a href="#5、烧录验证" class="headerlink" title="5、烧录验证"></a>5、烧录验证</h1><h2 id="5-1、具体步骤"><a href="#5-1、具体步骤" class="headerlink" title="5.1、具体步骤"></a>5.1、具体步骤</h2><p>“初始化LED引脚为输出 -&gt; 使用HAL库函数设置LED引脚输出高电平 -&gt; 引脚对应的LED点亮”</p><h2 id="5-2、实验现象"><a href="#5-2、实验现象" class="headerlink" title="5.2、实验现象"></a>5.2、实验现象</h2><p>烧录程序，然后观察开发板上LED灯的闪烁状态，发现开发板上电后4个LED均被点亮，其中GREEN_LED每隔一段时间闪烁一次</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.16.gif"></div><h1 id="6、注释解析"><a href="#6、注释解析" class="headerlink" title="6、注释解析"></a>6、注释解析</h1><p><em>注释1</em>：参看文章“<a href="https://blog.csdn.net/weixin_44788542/article/details/115303125">GPIO推挽输出和开漏输出模式区别详解</a>”</p><p><em>注释2</em>：参看文章“<a href="https://shequ.stmicroelectronics.cn/thread-632277-1-1.html">STM32F4 GPIO八种模式及工作原理详解</a>”</p><p><em>注释3</em>：需要在keil软件魔术手Options for Target‘GPIO’&#x2F;Output中勾选Browse Infomation，然后编译整个工程才可以跳转</p><p><em>注释4</em>：如果在STM32CubeMX的Project Manager&#x2F;Code Generator&#x2F;Generated files中没有勾选Generate peripheral initialization as a pair of ‘c&#x2F;.h’ files per peripheral，则所有生成的代码都会在main.c中实现，而不是每个外设分成.c&#x2F;.h的形式</p>]]></content>
    
    
    
    <tags>
      
      <tag>STM32CubeMX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32CubeMX教程1 工程建立</title>
    <link href="/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B1%20%E5%B7%A5%E7%A8%8B%E5%BB%BA%E7%AB%8B/"/>
    <url>/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B1%20%E5%B7%A5%E7%A8%8B%E5%BB%BA%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1、准备材料"><a href="#1、准备材料" class="headerlink" title="1、准备材料"></a>1、准备材料</h1><p>开发板（<a href="https://www.st.com/en/evaluation-tools/stm32f4discovery.html">STM32F407G-DISC1</a>）</p><p>STM32CubeMX软件（<a href="https://www.st.com/en/development-tools/stm32cubemx.html">Version 6.10.0</a>）</p><p>keil µVision5 IDE（<a href="https://www.keil.com/download/product/">MDK-Arm</a>）</p><p><a href="https://www.st.com/zh/development-tools/stsw-link009.html">ST-LINK&#x2F;V2驱动</a></p><h1 id="2、实验目标"><a href="#2、实验目标" class="headerlink" title="2、实验目标"></a>2、实验目标</h1><p>使用STM32CubeMX软件<font color="#fe2c24"><strong>建立一个STM32F407的空工程</strong></font></p><h1 id="3、建立流程"><a href="#3、建立流程" class="headerlink" title="3、建立流程"></a>3、建立流程</h1><h2 id="3-1、打开STM32CubeMX软件"><a href="#3-1、打开STM32CubeMX软件" class="headerlink" title="3.1、打开STM32CubeMX软件"></a>3.1、打开STM32CubeMX软件</h2><p>如下图所示为STM32CubeMX软件主界面</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.1.png" width = "700"></div><h2 id="3-2、开始建立工程"><a href="#3-2、开始建立工程" class="headerlink" title="3.2、开始建立工程"></a>3.2、开始建立工程</h2><p>单击ACCESS TO MCU SELECTOR</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.2.png" width = "700"></div><h2 id="3-3、选择MCU"><a href="#3-3、选择MCU" class="headerlink" title="3.3、选择MCU"></a>3.3、选择MCU</h2><p>在弹出的MCU选择界面，搜索工程使用的MCU型号，然后选中该MCU，单击界面右上角Start Project</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.3.png" width = "700"></div><h2 id="3-4、进行必要配置"><a href="#3-4、进行必要配置" class="headerlink" title="3.4、进行必要配置"></a>3.4、进行必要配置</h2><h3 id="3-4-1、Pinout-＆-Configuration页面配置"><a href="#3-4-1、Pinout-＆-Configuration页面配置" class="headerlink" title="3.4.1、Pinout ＆ Configuration页面配置"></a>3.4.1、Pinout ＆ Configuration页面配置</h3><p>进入Pinout ＆ Configuration页面中，如下图所示，<font color="#fe2c24"><strong>对于空工程来说只需在Pinout ＆ Configuration页面中配置RCC和SYS</strong></font>，RCC中主要配置高速外部时钟HSE和低速外部时钟LSE，SYS中主要配置单片机的Debug模式</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.4.png" width = "700"></div><p><font color="#fe2c24"><strong>如果使用高速外部时钟HSE，则需要单片机PH0-OSC_IN和PH0-OSC_OUT两个引脚接入一颗4MHz~16MHz的陶瓷晶振</strong></font></p><p><font color="#fe2c24"><strong>如果使用低速外部时钟LSE，则一般需要单片机PC14-OSC32_IN和PC15-OSC32_OUT两个引脚接入一颗32.768kHz的陶瓷晶振</strong></font></p><p>如果开发板单片机的引脚PH0-OSC_IN和PH0-OSC_OUT在原理图上连接了一颗4MHz~16MHz晶体 &#x2F; 陶瓷晶振，那么HSE就选择Crystal&#x2F;Ceramic Resonator，否则就选择Disable</p><p>同理如果PC14-OSC32_IN和PC15-OSC32_OUT两个引脚连接了一颗32.768kHz的晶体&#x2F;陶瓷晶振，那么LSE也选择Crystal&#x2F;Ceramic Resonator，否则一般直接选Disable即可</p><p>笔者使用的开发板HSE外部接入了一颗8MHz的陶瓷晶振，LSE未接入任何晶振，因此配置如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.5.png"></div><p><font color="#fe2c24"><strong>SYS中Debug模式表示MCU使用的下载调试模式，一般烧录程序会使用STLINK&#x2F;JTAG&#x2F;DAP等</strong></font>，按照自己的模式选择即可，笔者这里开发板板载了STLINK下载器，因此选择Serial Wire即可</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.6.png" ></div><h3 id="3-4-2、Clock-Configuration页面配置"><a href="#3-4-2、Clock-Configuration页面配置" class="headerlink" title="3.4.2、Clock Configuration页面配置"></a>3.4.2、Clock Configuration页面配置</h3><p>参考下图调节即可</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.7.png" width = "700"></div><h3 id="3-4-3、Project-Manager页面配置"><a href="#3-4-3、Project-Manager页面配置" class="headerlink" title="3.4.3、Project Manager页面配置"></a>3.4.3、Project Manager页面配置</h3><p>主要设置工程名称，存储位置，工具链&#x2F;IDE</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.8.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.9.png" width = "700"></div><h2 id="3-5、生成代码"><a href="#3-5、生成代码" class="headerlink" title="3.5、生成代码"></a>3.5、生成代码</h2><p>单击页面右上角GENERATE CODE生成代码，提示生成代码成功</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.10.png" ></div><p>找到生成代码目录下MDK-ARM里的.uvprojx结尾的keil工程文件，双击打开，编译工程</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.11.png" width = "700"></div><p>生成的工程代码结构主要有①单片机的启动文件②用户核心应用文件③HAL库驱动文件④单片机系统初始化文件</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.12.png" ></div><p><font color="#fe2c24"><strong>用户添加代码需要在代码注释中指定的BEGIN和END之间，否则使用CubeMX重新构建工程之后，添加的代码会消失</strong></font></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.13.png" width = "700"></div><h1 id="4、烧录验证"><a href="#4、烧录验证" class="headerlink" title="4、烧录验证"></a>4、烧录验证</h1><p>将开发板利用调试器与电脑连接，确保调试器驱动已安装，可以通过设备管理器查看驱动，如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.14.png" width = "700"></div><p>单击魔术手，选择对应调试器并配置</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.15.png" width = "700"></div><p>单击LOAD，烧录程序</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.16.png"></div><h1 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h1><p>当创建好空工程后，以后需要使用到MCU的什么功能，就可以重新打开这个STM32CubeMX工程，然后主要是在软件Pinout ＆ Configuration页面对功能进行配置，需要修改时钟在Clock Configuration页面配置，需要修改生成的工程及代码可以在Project Manager页面进行配置。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.st.com/resource/zh/user_manual/um1718-stm32cubemx-for-stm32-configuration-and-initialization-c-code-generation-stmicroelectronics.pdf">um1718-stm32cubemx-for-stm32-configuration-and-initialization-c-code-generation-stmicroelectronics.pdf</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>STM32CubeMX</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
