<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>STM32CubeMX教程2 GPIO输出 - 点亮LED灯</title>
    <link href="/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B2-GPIO%E8%BE%93%E5%87%BA-%E7%82%B9%E4%BA%AELED%E7%81%AF/"/>
    <url>/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B2-GPIO%E8%BE%93%E5%87%BA-%E7%82%B9%E4%BA%AELED%E7%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="1、准备材料"><a href="#1、准备材料" class="headerlink" title="1、准备材料"></a>1、准备材料</h1><p>开发板（<a href="https://www.st.com/en/evaluation-tools/stm32f4discovery.html">STM32F407G-DISC1</a>）</p><p>STM32CubeMX软件（<a href="https://www.st.com/en/development-tools/stm32cubemx.html">Version 6.10.0</a>）</p><p>keil µVision5 IDE（<a href="https://www.keil.com/download/product/">MDK-Arm</a>）</p><p><a href="https://www.st.com/zh/development-tools/stsw-link009.html">ST-LINK&#x2F;V2驱动</a></p><h1 id="2、实验目标"><a href="#2、实验目标" class="headerlink" title="2、实验目标"></a>2、实验目标</h1><p>使用STM32CubeMX软件配置STM32F407开发板点亮LED灯</p><h1 id="3、实验流程"><a href="#3、实验流程" class="headerlink" title="3、实验流程"></a>3、实验流程</h1><h2 id="3-0、前提知识"><a href="#3-0、前提知识" class="headerlink" title="3.0、前提知识"></a>3.0、前提知识</h2><p>笔者使用的STM32F407G-DISC1开发板主控制器为STM32F407VGT6，该MCU封装为LQFP 100，一共100个引脚，除去16个POWER引脚、1个NRST引脚和一个BOOT0引脚外，还剩余82个引脚，剩下的这些引脚均可以作为GPIO输入输出引脚使用，这些引脚分为6组，分别为GPIOA、GPIOB、GPIOC、GPIOD、GPIOE和GPIOH，除GPIOH只有2个引脚外，其余5组均为16个引脚，如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.1.png" ></div><p>在编程语言学习的过程中，一般学习者初始程序大多选择输出“Hello World!”，而在嵌入式单片机的学习中，一般学习者初始程序大多为“点亮LED灯”，笔者使用的开发板上拥有四个不同颜色的LED灯，其硬件原理图如下图所示，从电路连接上可以看出，<font color="#fe2c24"><strong>从上到下绿橙红蓝四个LED灯分别由单片机的PD12、PD13、PD14和PD15四个引脚控制，当这四个引脚输出高电平时，相应的LED则会被点亮</strong></font></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.2.png"></div><h2 id="3-1、CubeMX相关配置"><a href="#3-1、CubeMX相关配置" class="headerlink" title="3.1、CubeMX相关配置"></a>3.1、CubeMX相关配置</h2><h3 id="3-1-0、工程基本配置"><a href="#3-1-0、工程基本配置" class="headerlink" title="3.1.0、工程基本配置"></a>3.1.0、工程基本配置</h3><p>打开STM32CubeMX软件，单击ACCESS TO MCU SELECTOR选择开发板MCU（选择你使用开发板的主控MCU型号），选中MCU型号后单击页面右上角Start Project开始工程，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.3.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.4.png" width = "700"></div><p>开始工程之后在配置主页面System Core&#x2F;RCC中配置HSE&#x2F;LSE晶振，在System Core&#x2F;SYS中配置Debug模式，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.5.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.6.png" width = "700"></div><p>详细工程建立内容读者可以阅读“<a href="https://www.cnblogs.com/lc-guo/p/17937268">STM32CubeMX教程1 工程建立</a>”</p><h3 id="3-1-1、时钟树配置"><a href="#3-1-1、时钟树配置" class="headerlink" title="3.1.1、时钟树配置"></a>3.1.1、时钟树配置</h3><p>系统时钟使用8MHz外部高速时钟HSE，HCLK、PCLK1和PCLK2均设置为STM32F407能达到的最高时钟频率，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.7.png" width = "700"></div><h3 id="3-1-2、外设参数配置"><a href="#3-1-2、外设参数配置" class="headerlink" title="3.1.2、外设参数配置"></a>3.1.2、外设参数配置</h3><p>在Pinout ＆ Configuration页面右边单片机引脚预览Pinout view中，寻找需要设置的具体GPIO，这里我们选择PD12、PD13、PD14和PD15四个引脚，左键单击引脚可以对引脚功能进行设置，<font color="#fe2c24"><strong>统一选择为GPIO_Output</strong></font></p><p>在页面左边单片机功能分类栏目中选择GPIO，然后在页面中间栏目GPIO Mode and Configuration中可以看到所有使用到的具体GPIO及其相关配置，单击某个GPIO可以对其配置进行修改</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.8.png" width = "700"></div><p>当引脚选择GPIO Output时，GPIO mode有推挽输出和开漏输出两种，GPIO Pull-up&#x2F;Pull-down可以选择无上&#x2F;下拉、上拉和下拉其中的几种，<font color="#fe2c24"><strong>需要注意的是开漏输出无法真正输出高电平，即高电平时没有驱动能力，需要借助外部上拉电阻完成对外驱动</strong></font> <em>（注释1）</em></p><p>当GPIO mode设置为推挽输出时，此时上&#x2F;下拉只有在没有输出时才有作用，也就是说，推挽输出状态下，如果控制输出高电平那IO状态就为高电平，若控制输出低电平那IO状态就为低电平，此时与上&#x2F;下拉无关，而当没有控制输出时，此时IO的状态由上&#x2F;下拉决定 <em>（注释2）</em></p><p>当GPIO mode设置为开漏输出时，如果控制输出低电平那IO状态就为低电平；若控制输出高电平，此时输出指令就不会起到作用，IO状态由上&#x2F;下拉决定</p><p>因此<font color="#fe2c24"><strong>PD12、PD13、PD14和PD15四个引脚模式选择推挽输出，无上下拉</strong></font>，具体配置如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.9.png"></div><h2 id="3-2、生成代码"><a href="#3-2、生成代码" class="headerlink" title="3.2、生成代码"></a>3.2、生成代码</h2><h3 id="3-2-0、配置Project-Manager页面"><a href="#3-2-0、配置Project-Manager页面" class="headerlink" title="3.2.0、配置Project Manager页面"></a>3.2.0、配置Project Manager页面</h3><p>单击进入Project Manager页面，在左边Project分栏中修改工程名称、工程目录和工具链，然后在Code Generator中勾选“Gnerate peripheral initialization as a pair of ‘c&#x2F;h’ files per peripheral”，最后单击页面右上角GENERATE CODE生成工程，具体如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.10.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.11.png" width = "700"></div><p>详细Project Manager配置内容读者可以阅读“<a href="https://www.cnblogs.com/lc-guo/p/17937268">STM32CubeMX教程1 工程建立</a>”实验3.4.3小节</p><h3 id="3-2-1、外设初始化调用流程"><a href="#3-2-1、外设初始化调用流程" class="headerlink" title="3.2.1、外设初始化调用流程"></a>3.2.1、外设初始化调用流程</h3><p>打开工程，在main.c主函数中可以看到初始化部分多了MX_GPIO_Init()函数，此函数即初始化4个LED引脚为输出的函数</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.12.png" width = "700"></div><p>右键单击函数，单击Go To Definition Of ‘MX_GPlO_Init’ 定位<em>（注释3）</em>到函数定义所在的文件gpio.c<em>（注释4）</em>中，可以看到初始化函数中所做的设置正是我们在STM32CubeMX中所做的设置</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.13.png" width = "700"></div><p>此时如果不增加任何代码，编译整个工程应该是可以正常编译通过，0错误和0警告</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.14.png"></div><h3 id="3-2-2、添加其他必要代码"><a href="#3-2-2、添加其他必要代码" class="headerlink" title="3.2.2、添加其他必要代码"></a>3.2.2、添加其他必要代码</h3><p>然后我们就可以添加我们自己的功能代码，在主函数初始化LED的引脚之后，将引脚输出为高电平即可点亮LED，还可以在主循环中每隔一定时间翻转LED引脚的输出电平，形成LED闪烁的状态，添加代码如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.15.png" width = "700"></div><p>源代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*点亮四个LED灯*/</span><br>HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin,GPIO_PIN_SET);<br>HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port,ORANGE_LED_Pin,GPIO_PIN_SET);<br>HAL_GPIO_WritePin(RED_LED_GPIO_Port,RED_LED_Pin,GPIO_PIN_SET);<br>HAL_GPIO_WritePin(BLUE_LED_GPIO_Port,BLUE_LED_Pin,GPIO_PIN_SET);<br><br><span class="hljs-comment">/*每隔100ms翻转绿色LED灯状态*/</span><br>HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin) ;<br>HAL_Delay(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h1 id="4、常用函数"><a href="#4、常用函数" class="headerlink" title="4、常用函数"></a>4、常用函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  设置某个GPIO固定输出高电平或低电平</span><br><span class="hljs-comment">  * @param  GPIOx：引脚组别（GPIOA - GPIOI）</span><br><span class="hljs-comment">  * @param  GPIO_Pin：引脚（GPIO_PIN_0 - GPIO_PIN_15）</span><br><span class="hljs-comment">  * @param  PinState：低电平（GPIO_PIN_RESET）、高电平（GPIO_PIN_SET）</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">    */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_GPIO_WritePin</span><span class="hljs-params">(GPIO_TypeDef* GPIOx, <span class="hljs-type">uint16_t</span> GPIO_Pin, GPIO_PinState PinState)</span>;<br><br><span class="hljs-comment">/*设置PA0引脚输出高电平*/</span><br>HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  设置某个GPIO的输出电平翻转</span><br><span class="hljs-comment">  * @param  GPIOx：引脚组别（GPIOA - GPIOI）</span><br><span class="hljs-comment">  * @param  GPIO_Pin：引脚（GPIO_PIN_0 - GPIO_PIN_15）</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">    */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_GPIO_TogglePin</span><span class="hljs-params">(GPIO_TypeDef* GPIOx, <span class="hljs-type">uint16_t</span> GPIO_Pin)</span>;<br><br><span class="hljs-comment">/*翻转PA0引脚输出电平*/</span><br>HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_0);<br></code></pre></td></tr></table></figure><h1 id="5、烧录验证"><a href="#5、烧录验证" class="headerlink" title="5、烧录验证"></a>5、烧录验证</h1><h2 id="5-1、具体步骤"><a href="#5-1、具体步骤" class="headerlink" title="5.1、具体步骤"></a>5.1、具体步骤</h2><p>“初始化LED引脚为输出 -&gt; 使用HAL库函数设置LED引脚输出高电平 -&gt; 引脚对应的LED点亮”</p><h2 id="5-2、实验现象"><a href="#5-2、实验现象" class="headerlink" title="5.2、实验现象"></a>5.2、实验现象</h2><p>烧录程序，然后观察开发板上LED灯的闪烁状态，发现开发板上电后4个LED均被点亮，其中GREEN_LED每隔一段时间闪烁一次</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/2.16.gif"></div><h1 id="6、注释解析"><a href="#6、注释解析" class="headerlink" title="6、注释解析"></a>6、注释解析</h1><p><em>注释1</em>：参看文章“<a href="https://blog.csdn.net/weixin_44788542/article/details/115303125">GPIO推挽输出和开漏输出模式区别详解</a>”</p><p><em>注释2</em>：参看文章“<a href="https://shequ.stmicroelectronics.cn/thread-632277-1-1.html">STM32F4 GPIO八种模式及工作原理详解</a>”</p><p><em>注释3</em>：需要在keil软件魔术手Options for Target‘GPIO’&#x2F;Output中勾选Browse Infomation，然后编译整个工程才可以跳转</p><p><em>注释4</em>：如果在STM32CubeMX的Project Manager&#x2F;Code Generator&#x2F;Generated files中没有勾选Generate peripheral initialization as a pair of ‘c&#x2F;.h’ files per peripheral，则所有生成的代码都会在main.c中实现，而不是每个外设分成.c&#x2F;.h的形式</p>]]></content>
    
    
    
    <tags>
      
      <tag>STM32CubeMX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32CubeMX教程1 工程建立</title>
    <link href="/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B1%20%E5%B7%A5%E7%A8%8B%E5%BB%BA%E7%AB%8B/"/>
    <url>/2024/01/26/STM32CubeMX%E6%95%99%E7%A8%8B1%20%E5%B7%A5%E7%A8%8B%E5%BB%BA%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1、准备材料"><a href="#1、准备材料" class="headerlink" title="1、准备材料"></a>1、准备材料</h1><p>开发板（<a href="https://www.st.com/en/evaluation-tools/stm32f4discovery.html">STM32F407G-DISC1</a>）</p><p>STM32CubeMX软件（<a href="https://www.st.com/en/development-tools/stm32cubemx.html">Version 6.10.0</a>）</p><p>keil µVision5 IDE（<a href="https://www.keil.com/download/product/">MDK-Arm</a>）</p><p><a href="https://www.st.com/zh/development-tools/stsw-link009.html">ST-LINK&#x2F;V2驱动</a></p><h1 id="2、实验目标"><a href="#2、实验目标" class="headerlink" title="2、实验目标"></a>2、实验目标</h1><p>使用STM32CubeMX软件<font color="#fe2c24"><strong>建立一个STM32F407的空工程</strong></font></p><h1 id="3、建立流程"><a href="#3、建立流程" class="headerlink" title="3、建立流程"></a>3、建立流程</h1><h2 id="3-1、打开STM32CubeMX软件"><a href="#3-1、打开STM32CubeMX软件" class="headerlink" title="3.1、打开STM32CubeMX软件"></a>3.1、打开STM32CubeMX软件</h2><p>如下图所示为STM32CubeMX软件主界面</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.1.png" width = "700"></div><h2 id="3-2、开始建立工程"><a href="#3-2、开始建立工程" class="headerlink" title="3.2、开始建立工程"></a>3.2、开始建立工程</h2><p>单击ACCESS TO MCU SELECTOR</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.2.png" width = "700"></div><h2 id="3-3、选择MCU"><a href="#3-3、选择MCU" class="headerlink" title="3.3、选择MCU"></a>3.3、选择MCU</h2><p>在弹出的MCU选择界面，搜索工程使用的MCU型号，然后选中该MCU，单击界面右上角Start Project</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.3.png" width = "700"></div><h2 id="3-4、进行必要配置"><a href="#3-4、进行必要配置" class="headerlink" title="3.4、进行必要配置"></a>3.4、进行必要配置</h2><h3 id="3-4-1、Pinout-＆-Configuration页面配置"><a href="#3-4-1、Pinout-＆-Configuration页面配置" class="headerlink" title="3.4.1、Pinout ＆ Configuration页面配置"></a>3.4.1、Pinout ＆ Configuration页面配置</h3><p>进入Pinout ＆ Configuration页面中，如下图所示，<font color="#fe2c24"><strong>对于空工程来说只需在Pinout ＆ Configuration页面中配置RCC和SYS</strong></font>，RCC中主要配置高速外部时钟HSE和低速外部时钟LSE，SYS中主要配置单片机的Debug模式</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.4.png" width = "700"></div><p><font color="#fe2c24"><strong>如果使用高速外部时钟HSE，则需要单片机PH0-OSC_IN和PH0-OSC_OUT两个引脚接入一颗4MHz~16MHz的陶瓷晶振</strong></font></p><p><font color="#fe2c24"><strong>如果使用低速外部时钟LSE，则一般需要单片机PC14-OSC32_IN和PC15-OSC32_OUT两个引脚接入一颗32.768kHz的陶瓷晶振</strong></font></p><p>如果开发板单片机的引脚PH0-OSC_IN和PH0-OSC_OUT在原理图上连接了一颗4MHz~16MHz晶体 &#x2F; 陶瓷晶振，那么HSE就选择Crystal&#x2F;Ceramic Resonator，否则就选择Disable</p><p>同理如果PC14-OSC32_IN和PC15-OSC32_OUT两个引脚连接了一颗32.768kHz的晶体&#x2F;陶瓷晶振，那么LSE也选择Crystal&#x2F;Ceramic Resonator，否则一般直接选Disable即可</p><p>笔者使用的开发板HSE外部接入了一颗8MHz的陶瓷晶振，LSE未接入任何晶振，因此配置如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.5.png"></div><p><font color="#fe2c24"><strong>SYS中Debug模式表示MCU使用的下载调试模式，一般烧录程序会使用STLINK&#x2F;JTAG&#x2F;DAP等</strong></font>，按照自己的模式选择即可，笔者这里开发板板载了STLINK下载器，因此选择Serial Wire即可</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.6.png" ></div><h3 id="3-4-2、Clock-Configuration页面配置"><a href="#3-4-2、Clock-Configuration页面配置" class="headerlink" title="3.4.2、Clock Configuration页面配置"></a>3.4.2、Clock Configuration页面配置</h3><p>参考下图调节即可</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.7.png" width = "700"></div><h3 id="3-4-3、Project-Manager页面配置"><a href="#3-4-3、Project-Manager页面配置" class="headerlink" title="3.4.3、Project Manager页面配置"></a>3.4.3、Project Manager页面配置</h3><p>主要设置工程名称，存储位置，工具链&#x2F;IDE</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.8.png" width = "700"></div><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.9.png" width = "700"></div><h2 id="3-5、生成代码"><a href="#3-5、生成代码" class="headerlink" title="3.5、生成代码"></a>3.5、生成代码</h2><p>单击页面右上角GENERATE CODE生成代码，提示生成代码成功</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.10.png" ></div><p>找到生成代码目录下MDK-ARM里的.uvprojx结尾的keil工程文件，双击打开，编译工程</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.11.png" width = "700"></div><p>生成的工程代码结构主要有①单片机的启动文件②用户核心应用文件③HAL库驱动文件④单片机系统初始化文件</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.12.png" ></div><p><font color="#fe2c24"><strong>用户添加代码需要在代码注释中指定的BEGIN和END之间，否则使用CubeMX重新构建工程之后，添加的代码会消失</strong></font></p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.13.png" width = "700"></div><h1 id="4、烧录验证"><a href="#4、烧录验证" class="headerlink" title="4、烧录验证"></a>4、烧录验证</h1><p>将开发板利用调试器与电脑连接，确保调试器驱动已安装，可以通过设备管理器查看驱动，如下图所示</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.14.png" width = "700"></div><p>单击魔术手，选择对应调试器并配置</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.15.png" width = "700"></div><p>单击LOAD，烧录程序</p><div align=center><img src="https://blog-picture-240114.oss-cn-beijing.aliyuncs.com/STM32CubeMX/1.16.png"></div><h1 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h1><p>当创建好空工程后，以后需要使用到MCU的什么功能，就可以重新打开这个STM32CubeMX工程，然后主要是在软件Pinout ＆ Configuration页面对功能进行配置，需要修改时钟在Clock Configuration页面配置，需要修改生成的工程及代码可以在Project Manager页面进行配置。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.st.com/resource/zh/user_manual/um1718-stm32cubemx-for-stm32-configuration-and-initialization-c-code-generation-stmicroelectronics.pdf">um1718-stm32cubemx-for-stm32-configuration-and-initialization-c-code-generation-stmicroelectronics.pdf</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>STM32CubeMX</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
